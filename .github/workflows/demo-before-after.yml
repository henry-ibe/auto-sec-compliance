name: Demo (ephemeral EC2) - Before/After
on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - .github/trigger/run-demo    # touching this file triggers the demo

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  REPORTS_BUCKET: auto-sec-reports-1757193665
  METRIC_NAMESPACE: ComplianceMetrics
  REPO_NAME: henry-ibe/auto-sec-compliance
  DEMO_IAM_PROFILE: DemoTargetRole

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure CLI deps (jq)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::782781395980:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve latest AL2023 AMI (x86_64)
        id: ami
        run: |
          AMI=$(aws ec2 describe-images \
            --owners 137112412989 \
            --filters "Name=name,Values=al2023-ami-*-x86_64" "Name=state,Values=available" \
            --query "reverse(sort_by(Images,&CreationDate))[0].ImageId" --output text)
          echo "id=$AMI" >> "$GITHUB_OUTPUT"
          echo "Using AMI: $AMI"

      - name: Launch t3.micro with public IP in default VPC
        id: launch
        shell: bash
        env:
          AMI: ${{ steps.ami.outputs.id }}
        run: |
          set -euo pipefail
          VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output text)
          [ "$VPC" != "None" ] || { echo "::error::No default VPC"; exit 1; }

          SUBNET=$(aws ec2 describe-subnets \
            --filters Name=vpc-id,Values="$VPC" Name=map-public-ip-on-launch,Values=true \
            --query "Subnets[0].SubnetId" --output text)
          if [ "$SUBNET" = "None" ] || [ -z "$SUBNET" ]; then
            SUBNET=$(aws ec2 describe-subnets \
              --filters Name=vpc-id,Values="$VPC" Name=default-for-az,Values=true \
              --query "Subnets[0].SubnetId" --output text)
          fi
          [ "$SUBNET" != "None" ] && [ -n "$SUBNET" ] || { echo "::error::No subnet"; exit 1; }

          SG=$(aws ec2 describe-security-groups \
            --filters Name=vpc-id,Values="$VPC" Name=group-name,Values=default \
            --query "SecurityGroups[0].GroupId" --output text)
          [ "$SG" != "None" ] || { echo "::error::No default SG"; exit 1; }

          IID=$(aws ec2 run-instances \
            --image-id "$AMI" \
            --instance-type t3.micro \
            --iam-instance-profile "Name=$DEMO_IAM_PROFILE" \
            --subnet-id "$SUBNET" \
            --security-group-ids "$SG" \
            --associate-public-ip-address \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=BeforeAfterDemo}]' \
            --query "Instances[0].InstanceId" --output text)
          echo "iid=$IID" >> "$GITHUB_OUTPUT"
          echo "Launched: $IID"

          aws ec2 wait instance-running --instance-ids "$IID"
          PUBIP=$(aws ec2 describe-instances --instance-ids "$IID" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Public IP: $PUBIP"
          if [ "$PUBIP" = "None" ] || [ -z "$PUBIP" ]; then
            echo "::error::Instance has no public IP (check IGW route or use VPC endpoints for SSM)."; exit 1;
          fi

      - name: Wait for SSM Online
        id: wait
        shell: bash
        env:
          IID: ${{ steps.launch.outputs.iid }}
        run: |
          set -euo pipefail
          for i in {1..30}; do
            online=$(aws ssm describe-instance-information \
              --query "InstanceInformationList[?InstanceId=='$IID'] | length(@)" --output text)
            [ "$online" = "1" ] && { echo "SSM online"; exit 0; } || sleep 10
          done
          echo "::error::SSM never became online for $IID"; exit 1

      - name: Upload inline demo script via SSM
        id: upload
        shell: bash
        env:
          IID: ${{ steps.launch.outputs.iid }}
        run: |
          set -euo pipefail
          cat > demo.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail
          REGION="${1:?region}"
          BUCKET="${2:?bucket}"
          REPO="${3:?repo}"
          BRANCH="${4:?branch}"
          NS="${5:?namespace}"
          RUN="${6:?run}"

          log(){ echo "[$(date -u +%FT%TZ)] $*"; }

          sudo dnf -y install awscli || sudo yum -y install awscli || true
          sudo dnf -y install jq python3 openscap openscap-scanner scap-security-guide || sudo yum -y install jq python3 openscap openscap-scanner scap-security-guide || true
          curl -sL https://downloads.cisofy.com/lynis/lynis/lynis-3.0.9.tar.gz | sudo tar xz -C /opt || true
          sudo ln -sf /opt/lynis/lynis /usr/local/bin/lynis || true
          mkdir -p /tmp/reports

          cat > /tmp/summarize_json.py <<'PY'
          import json, re, xml.etree.ElementTree as ET
          li=None
          for line in open('/tmp/reports/lynis-report.dat','r',errors='ignore'):
              m=re.search(r'HARDENING_INDEX\\s*=\\s*(\\d+)',line)
              if m: li=int(m.group(1)); break
          osc=None
          root=ET.parse('/tmp/reports/openscap-results.xml').getroot()
          for s in root.iter():
              if s.tag.endswith('score'):
                  try:
                      v=float((s.text or '').strip()); osc=v*100 if v<=1.0 else v; break
                  except: pass
          status=('pass' if (osc and osc>=70) and (li and li>=60) else 'warn')
          print(json.dumps({'lynis_hardening_index':li,'openscap_score':osc,'status':status}))
          PY

          make_noncompliant(){
            log "making non-compliant"
            sudo sed -i 's/^#\\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config || true
            sudo systemctl restart sshd || true
            sudo dnf -y remove fail2ban || sudo yum -y remove -y fail2ban || true
            sudo systemctl disable --now dnf-automatic.timer || true
          }
          remediate(){
            log "remediating"
            sudo sed -i 's/^#\\?PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config || true
            sudo systemctl restart sshd || true
            sudo dnf -y install fail2ban || sudo yum -y install -y fail2ban || true
            sudo systemctl enable --now dnf-automatic.timer || true
          }
          scan(){
            STAGE="$1"; log "scan $STAGE"
            lynis audit system --quiet --report-file /tmp/reports/lynis-report.dat
            oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \
              --results /tmp/reports/openscap-results.xml \
              --report  /tmp/reports/openscap-report.html \
              /usr/share/xml/scap/ssg/content/ssg-amazon_linux_2023-xccdf.xml
            python3 /tmp/summarize_json.py > /tmp/reports/summary.json
            aws s3 cp /tmp/reports "s3://$BUCKET/$RUN/$STAGE/" --recursive --region "$REGION"
            J=$(cat /tmp/reports/summary.json)
            LYNIS=$(echo "$J" | jq -r '.lynis_hardening_index // 0')
            OSC=$(echo "$J"  | jq -r '.openscap_score // 0')
            STATUS=$(echo "$J" | jq -r '.status // "warn"')
            VAL=$([ "$STATUS" = pass ] && echo 1 || echo 0)
            aws cloudwatch put-metric-data --region "$REGION" --namespace "$NS" --metric-data "[
              {\"MetricName\":\"OpenSCAPScore\",\"Value\":$OSC,\"Unit\":\"None\",\"Dimensions\":[{\"Name\":\"Repo\",\"Value\":\"$REPO\"},{\"Name\":\"Branch\",\"Value\":\"$BRANCH\"},{\"Name\":\"Stage\",\"Value\":\"$STAGE\"}]},
              {\"MetricName\":\"LynisHardeningIndex\",\"Value\":$LYNIS,\"Unit\":\"None\",\"Dimensions\":[{\"Name\":\"Repo\",\"Value\":\"$REPO\"},{\"Name\":\"Branch\",\"Value\":\"$BRANCH\"},{\"Name\":\"Stage\",\"Value\":\"$STAGE\"}]},
              {\"MetricName\":\"Status\",\"Value\":$VAL,\"Unit\":\"Count\",\"Dimensions\":[{\"Name\":\"Repo\",\"Value\":\"$REPO\"},{\"Name\":\"Branch\",\"Value\":\"$BRANCH\"},{\"Name\":\"Stage\",\"Value\":\"$STAGE\"}]}
            ]"
            if [ "$STAGE" = "After" ]; then
              aws s3 cp /tmp/reports/openscap-report.html "s3://$BUCKET/latest/openscap-report-after.html" --region "$REGION" || true
            fi
          }
          make_noncompliant
          scan "Before"
          remediate
          scan "After"
          BASH

          CMDS=$(printf "bash -lc 'cat > /tmp/demo.sh <<\"EOS\"\n%s\nEOS\nchmod +x /tmp/demo.sh'\n" "$(cat demo.sh)")
          CID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$IID" \
            --comment "upload demo.sh" \
            --parameters "commands=$CMDS" \
            --query "Command.CommandId" --output text)
          echo "upload_cmd_id=$CID" >> "$GITHUB_OUTPUT"

      - name: Run the demo
        id: runcmd
        shell: bash
        env:
          IID: ${{ steps.launch.outputs.iid }}
        run: |
          set -euo pipefail
          RUN_ID="${GITHUB_RUN_ID}-${GITHUB_SHA::7}"
          CID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$IID" \
            --comment "run demo $RUN_ID" \
            --parameters commands="bash -lc '/tmp/demo.sh \"${AWS_REGION}\" \"${REPORTS_BUCKET}\" \"${REPO_NAME}\" \"${GITHUB_REF_NAME}\" \"${METRIC_NAMESPACE}\" \"$RUN_ID\"'" \
            --query "Command.CommandId" --output text)
          echo "cmd_id=$CID" >> "$GITHUB_OUTPUT"
          for i in {1..90}; do
            S=$(aws ssm get-command-invocation --command-id "$CID" --instance-id "$IID" --query Status --output text || true)
            [[ "$S" =~ ^(Success|Failed|Cancelled|TimedOut)$ ]] && break
            sleep 5
          done
          echo "SSM status: $S"
          aws ssm get-command-invocation --command-id "$CID" --instance-id "$IID" --output json > demo-ssm-out.json
          jq -r '.StandardOutputContent' demo-ssm-out.json > demo-stdout.txt
          jq -r '.StandardErrorContent'  demo-ssm-out.json > demo-stderr.txt
          test "$S" = "Success" || { echo "::error::remote demo failed"; exit 1; }

      - name: Output handy links
        if: always()
        run: |
          echo "S3 (latest After): http://auto-sec-reports-1757193665.s3-website-us-east-1.amazonaws.com/latest/openscap-report-after.html"

      - name: Upload runner artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: demo-ssm-logs
          path: |
            demo-ssm-out.json
            demo-stdout.txt
            demo-stderr.txt

      - name: Terminate demo instance
        if: always()
        shell: bash
        env:
          IID: ${{ steps.launch.outputs.iid }}
        run: aws ec2 terminate-instances --instance-ids "$IID" && echo "terminated: $IID"
